"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _getTransitionTimeMs = _interopRequireDefault(require("./getTransitionTimeMs"));

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["allowOverflowWhenOpen", "children", "collapsedHeight", "eagerRender", "expanded", "heightTransition", "onChangeEnd"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var SmoothCollapse = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(SmoothCollapse, _React$Component);

  var _super = _createSuper(SmoothCollapse);

  function SmoothCollapse(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SmoothCollapse);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_removeTransitionEndListener", function () {});
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_main", /*#__PURE__*/React.createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_inner", /*#__PURE__*/React.createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onNextTransitionEnd", function (el, callback) {
      _this._removeTransitionEndListener();

      var listener = function listener() {
        _this._removeTransitionEndListener();

        callback();
      };

      var timeout;

      _this._removeTransitionEndListener = function () {
        _this._removeTransitionEndListener = function () {};

        clearTimeout(timeout);
        el.removeEventListener('transitionend', listener);
      }; // Wait until the transitionend event, or until a timer goes off in
      // case the event doesn't fire because the browser doesn't support it
      // or the element is hidden before it happens. The timer is a little
      // longer than the transition is supposed to take to make sure we don't
      // cut the animation early while it's still going if the browser is
      // running it just a little slow.


      el.addEventListener('transitionend', listener);
      var ms = (0, _getTransitionTimeMs["default"])(_this.props.heightTransition) * 1.1 + 500;
      timeout = setTimeout(listener, ms);
    });
    _this.state = {
      renderInner: props.expanded || SmoothCollapse._visibleWhenClosed(props),
      closing: false,
      fullyClosed: !props.expanded,
      height: props.expanded ? 'auto' : props.collapsedHeight
    };
    return _this;
  }

  (0, _createClass2["default"])(SmoothCollapse, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._removeTransitionEndListener();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      if (!prevProps.expanded && this.props.expanded) {
        this._removeTransitionEndListener();

        var mainEl = this._main.current;
        var innerEl = this._inner.current;
        if (!mainEl || !innerEl) throw new Error('Should not happen'); // Set the collapser to the target height instead of auto so that it
        // animates correctly. Then switch it to 'auto' after the animation so
        // that it flows correctly if the page is resized.

        var targetHeight = "".concat(innerEl.clientHeight, "px");
        this.setState({
          height: targetHeight
        });

        this._onNextTransitionEnd(mainEl, function () {
          _this2.setState({
            height: 'auto'
          }, function () {
            if (_this2.props.onChangeEnd) {
              _this2.props.onChangeEnd();
            }
          });
        });
      } else if (prevProps.expanded && !this.props.expanded) {
        this._removeTransitionEndListener();

        if (!this._inner.current) throw new Error('Should not happen');
        this.setState({
          height: "".concat(this._inner.current.clientHeight, "px")
        }, function () {
          var mainEl = _this2._main.current;
          if (!mainEl) throw new Error('Should not happen');
          mainEl.clientHeight; // force the page layout

          _this2.setState({
            height: _this2.props.collapsedHeight,
            closing: true
          });

          _this2._onNextTransitionEnd(mainEl, function () {
            _this2.setState({
              closing: false,
              fullyClosed: true
            });

            if (_this2.props.onChangeEnd) {
              _this2.props.onChangeEnd();
            }
          });
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var visibleWhenClosed = SmoothCollapse._visibleWhenClosed(this.props);

      var _this$props = this.props,
          allowOverflowWhenOpen = _this$props.allowOverflowWhenOpen,
          children = _this$props.children,
          collapsedHeight = _this$props.collapsedHeight,
          eagerRender = _this$props.eagerRender,
          expanded = _this$props.expanded,
          heightTransition = _this$props.heightTransition,
          onChangeEnd = _this$props.onChangeEnd,
          props = (0, _objectWithoutProperties2["default"])(_this$props, _excluded);
      var _this$state = this.state,
          height = _this$state.height,
          fullyClosed = _this$state.fullyClosed,
          renderInner = _this$state.renderInner;
      var innerEl = renderInner ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        ref: this._inner,
        style: {
          overflow: allowOverflowWhenOpen && height === 'auto' ? 'visible' : 'hidden'
        },
        children: children
      }) : null;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({}, props), {}, {
        ref: this._main,
        style: {
          height: height,
          overflow: allowOverflowWhenOpen && height === 'auto' ? 'visible' : 'hidden',
          display: fullyClosed && !visibleWhenClosed ? 'none' : null,
          transition: "height ".concat(heightTransition)
        },
        children: innerEl
      }));
    }
  }], [{
    key: "_visibleWhenClosed",
    value: function _visibleWhenClosed(props) {
      return props.eagerRender || parseFloat(props.collapsedHeight) !== 0;
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.expanded && (state.closing || state.fullyClosed)) {
        return {
          closing: false,
          fullyClosed: false,
          renderInner: true
        };
      } else if (!props.expanded && (state.closing || state.fullyClosed) && state.height !== props.collapsedHeight) {
        return {
          height: props.collapsedHeight,
          renderInner: state.renderInner || SmoothCollapse._visibleWhenClosed(props)
        };
      }

      return null;
    }
  }]);
  return SmoothCollapse;
}(React.Component);

exports["default"] = SmoothCollapse;
(0, _defineProperty2["default"])(SmoothCollapse, "propTypes", {
  expanded: _propTypes["default"].bool.isRequired,
  onChangeEnd: _propTypes["default"].func,
  collapsedHeight: _propTypes["default"].string,
  heightTransition: _propTypes["default"].string,
  className: _propTypes["default"].string,
  allowOverflowWhenOpen: _propTypes["default"].bool,
  eagerRender: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(SmoothCollapse, "defaultProps", {
  collapsedHeight: '0',
  heightTransition: '.25s ease',
  className: '',
  allowOverflowWhenOpen: false,
  eagerRender: false
});
//# sourceMappingURL=index.js.map